plugins {
    id 'java'
    id 'io.quarkus'
    id "org.sonarqube" version "4.4.1.3373"
    id 'jacoco'
}


repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'io.quarkus:quarkus-websockets'
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-resteasy-reactive'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1' // Explicitly add JAX-RS API
    implementation 'io.quarkus:quarkus-vertx-http'
    implementation 'io.quarkus:quarkus-vertx-http-deployment'


    implementation 'io.quarkus:quarkus-container-image-jib'
    implementation 'io.quarkus:quarkus-kubernetes'
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-micrometer'
    implementation 'io.quarkus:quarkus-undertow'


    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation "io.quarkus:quarkus-jacoco"

    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation("io.quarkus:quarkus-websockets")


}

group 'org.acme'
version '1.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    finalizedBy jacocoTestReport
    jacoco {
        excludeClassLoaders = ["*QuarkusClassLoader"]
        destinationFile = layout.buildDirectory.file("jacoco-quarkus.exec").get().asFile
    }
    jacocoTestReport.enabled = true
}

sonar {
    properties {
        property "sonar.projectKey", "projet4"
        property "sonar.token", "sqp_d54ffd8f16894a86c357bfdf98373e5145af0d7f"
        property "sonar.projectName", "projet4"
        property "sonar.qualitygate.wait", true
        property "sonar.host.url", "https://sonar.home.lange.xyz"
        tasks.jacocoTestReport.configure {
            property("sonar.coverage.jacoco.xmlReportPaths", [
                                                              "build/reports/jacoco/test/jacocoTestReport.xml"
            ])
        }
    }
}

jacocoTestReport{
    reports {
        xml.required =  true
        html.required = true
        csv.required = true
    }
}


compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
